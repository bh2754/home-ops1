---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app sonarr
  namespace: organizers
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    addons:
      netshoot:
        enabled: false
    controller:
      replicas: 1
    image:
      repository: ghcr.io/bh2754/sonarr-develop
      tag: 4.0.0.665@sha256:8f0a3e77843882222dbfa6a94c27b14561659400aae917c0700eac7f228846f6
      pullPolicy: IfNotPresent
    env:
      TZ: "${TZ}"
      SONARR__INSTANCE_NAME: Sonarr
      SONARR__PORT: &port 80
      SONARR__APPLICATION_URL: "https://sonarr.${SECRET_DOMAIN}"
      SONARR__LOG_LEVEL: info
    envFrom:
      - secretRef:
          name: sonarr-secret
    service:
      main:
        ports:
          http:
            port: *port
    ingress:
      main:
        enabled: true
        ingressClassName: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local/api/verify
          nginx.ingress.kubernetes.io/auth-signin: https://auth.bharris.vip?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
#         external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}
#         cert-manager.io/cluster-issuer: "letsencrypt-production"
#         auth.home.arpa/enabled: "true"
#         external-dns.home.arpa/enabled: "true"
#         external-dns/is-public: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "television-box"
          nginx.ingress.kubernetes.io/configuration-snippet: |
           proxy_set_header Accept-Encoding "";
           sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://theme-park.${SECRET_DOMAIN}/css/base/sonarr/hotline.css"></head>';
            sub_filter_once on;
          theme: "hotline"
        hosts:
          - host: &host "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
#           secretName: &tls "sonarr-tls"
    podSecurityContext:
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: "OnRootMismatch"
      supplementalGroups:
        - 100
    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config-v1
      media:
        enabled: true
        type: nfs
        server: "${NFS_SERVER}"
        path: "${NFS_MEDIA}"
        mountPath: /media
      download:
        enabled: true
        type: nfs
        server: "${NFS_SERVER}"
        path: "${NFS_DOWNLOAD}"
        mountPath: /download
    podAnnotations:
      secret.reloader.stakater.com/reload: *app
      setGateway: "true"
    resources:
      requests:
        cpu: 10m
        memory: 814M
        ephemeral-storage: "2Gi"
      limits:
        memory: 1054M
        ephemeral-storage: "4Gi"
    metrics:
      # -- Enable and configure Exportarr sidecar and Prometheus serviceMonitor.
      # @default -- See values.yaml
      enabled: true
      serviceMonitor:
        interval: 3m
        scrapeTimeout: 1m
        labels: {}
      # -- Enable and configure Prometheus Rules for the chart under this key.
      # @default -- See values.yaml
      prometheusRule:
        enabled: true
        rules:
          - alert: SonarrDown
            annotations:
              description: Sonarr service is down.
              summary: Sonarr is down.
            expr: |
              sonarr_system_status == 0
            for: 5m
            labels:
              severity: critical
      exporter:
        image:
          # -- image repository
          repository: ghcr.io/onedr0p/exportarr
          # -- image tag
          tag: v1.5.3
          # -- image pull policy
          pullPolicy: IfNotPresent
        env:
          # -- metrics port
          port: 9794
          # -- Set to true to enable gathering of additional metrics (slow)
          additionalMetrics: true
          # -- Set to true to enable gathering unknown queue items
          unknownQueueItems: true
